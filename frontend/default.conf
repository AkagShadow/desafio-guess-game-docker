# server {
#   listen 80;
#   location / {
#     root /usr/share/nginx/html;
#     index index.html index.htm;
#     try_files $uri $uri/ /index.html;
#   }
# }


# Define um upstream para o serviço de backend.
# O nome 'backend' aqui deve corresponder ao nome do serviço do backend no docker-compose.yml.
# Isso permite que o NGINX balanceie a carga entre múltiplos containers 'backend'.
# upstream backend_servers {
    # server backend:5000;  # Para uma única instância do backend
    # Usaremos um nome de serviço que o Docker Compose resolverá.
    # A porta 5000 é a porta que o Flask está expondo.
    # weight define a proporção de requisições enviadas para cada servidor,
    # caso você tenha mais de uma instância do backend.
#     # Por enquanto, teremos uma instância, mas a estrutura já permite o scale.
#     server backend:5000 weight=1;
#     # server backend2:5000 weight=1; # Exemplo para outra instância do backend
# }

server {
    listen 80; # NGINX vai escutar na porta 80

    # Define o diretório raiz para servir arquivos estáticos.
    # Este é o diretório onde o Dockerfile do frontend copiou os arquivos do React.
    root /usr/share/nginx/html;

    # Define o arquivo de índice padrão.
    index index.html index.htm;

    # Configuração para servir os arquivos estáticos do frontend.
    # Este bloco é o que você já tinha, mas vamos reconfirmá-lo.
    location / {
        try_files $uri $uri/ /index.html; # Tenta servir o arquivo, ou diretório, ou fallback para index.html (para rotas do React)
    }

    # Configuração para o proxy reverso para o backend.
    # Todas as requisições que começam com /api serão encaminhadas para o backend.
#    location /api {
#        proxy_pass http://backend_servers; # Encaminha para o upstream definido acima
#        proxy_set_header Host $host;
#        proxy_set_header X-Real-IP $remote_addr;
#        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#        proxy_set_header X-Forwarded-Proto $scheme;
#    }


# Bloco para lidar com POSTs para /api especificamente
    # Se a requisição for POST para EXATAMENTE /api, reescreva para /api/create
    # e depois use o proxy_pass que lida com /api/create -> /create
    # location = /api { # O "=" garante que seja APENAS para /api (exato)
    #     if ($request_method = POST) {
    #         # Reescreve a URI para /api/create INTERNAMENTE no NGINX
    #         # O 'last' faz o NGINX processar as novas rotas.
    #         rewrite ^ /api/create last;
    #     }
    #     # Se não for POST, pode retornar 405 ou 404, ou não fazer nada e deixar cair em outra location
    #     return 405; # Mantemos o 405 para outros métodos se não houver um POST
    # }



}